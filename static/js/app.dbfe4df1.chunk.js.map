{"version":3,"sources":["assets/fonts/Roboto-Regular.ttf","assets/fonts/Roboto-Bold.ttf","assets/images/no-items.png","src/constants/files/index.js","src/utils/index.js","src/services/getDeviceSize/index.js","src/reducers/dataFetchReducer/index.js","src/constants/actionTypes/index.js","src/constants/paths/index.js","src/actions/index.js","src/hooks/useFetchQuotesList/index.js","src/hooks/useSearch/index.js","src/hooks/usePagination/index.js","src/constants/pagination/index.js","src/contextes/quotesListContext/index.js","src/hooks/useFetchQuote/index.js","src/contextes/quoteContext/index.js","src/contextes/mainContext/index.js","src/services/detectDeviceOS/index.js","src/constants/routes/index.js","src/components/AppText/index.js","src/components/ErrorIndicator/styles.js","src/constants/themes/index.js","src/components/ErrorIndicator/index.js","src/components/AppButton/styles.js","src/components/AppButton/index.js","src/components/AppLoader/styles.js","src/components/AppLoader/index.js","src/components/EmptyPage/styles.js","src/components/EmptyPage/index.js","src/components/Search/styles.js","src/components/Search/index.js","src/components/Pagination/styles.js","src/components/Pagination/index.js","src/components/Quote/styles.js","src/components/Quote/index.js","src/screens/QuotesList/styles.js","src/screens/QuotesList/index.js","src/constants/lists/index.js","src/services/getDetailsList/index.js","src/components/Row/styles.js","src/components/Row/index.js","src/screens/Details/styles.js","src/screens/Details/index.js","src/navigation/index.js","src/components/AppStatusBar/styles.js","src/components/AppStatusBar/index.js","src/layouts/Main/styles.js","src/layouts/Main/index.js","src/components/ErrorBoundary/index.js","App.js","web-build/register-service-worker.js"],"names":["module","exports","FONTS","robotoRegularFont","robotoBoldFont","IMGS","noItems","encodeSeparatedFields","fields","separatedFields","join","encodeURIComponent","getDataListWithValues","list","data","symbol","description","digits","ask","bid","change","change24h","map","item","title","value","Dimensions","get","width","height","deviceWidth","PADDING_HORIZONTAL","deviceHeight","Math","round","quotesPerPage","floor","initState","isLoading","isError","dataFetchReducer","state","type","BASE_PATH","fetchSuccess","useFetchQuotesList","useReducer","dispatch","fetchData","useCallback","a","async","encodedSeparatedFields","fetch","response","json","result","quotesList","sortedQuotesList","sort","b","localeCompare","useEffect","useSearch","initialSearch","useState","search","setSearch","usePagination","initialPage","currentPage","setCurrentPage","operator","initContextValue","totalPages","updateSearch","paginate","QuotesListContext","createContext","QuotesListProvider","children","initPage","initSearch","foundQuotes","filter","itemData","toUpperCase","textData","match","findQuotes","currentQuotesList","dataList","listsPerPage","indexOfLastItem","indexOfFirstItem","ceil","length","slice","getDataForCurrentPage","Provider","propTypes","PropTypes","node","isRequired","useFetchQuote","quoteId","query","QuoteContext","QuoteProvider","MainProvider","OS","Platform","isAndroid","isIOS","HOME_OPTIONS","DETAILS_OPTIONS","route","params","AppText","style","bold","attrs","textStyles","fontFamily","Text","bool","defaultProps","styles","StyleSheet","create","error","alignItems","flex","justifyContent","text","color","fontSize","marginBottom","ErrorIndicator","View","button","borderRadius","flexDirection","paddingHorizontal","paddingVertical","AppButton","onPress","backgroundColor","activeOpacity","Wrapper","TouchableNativeFeedback","TouchableOpacity","buttonStyles","func","string","number","loader","AppLoader","size","ActivityIndicator","image","resizeMode","wrapper","padding","EmptyPage","Image","source","input","borderColor","borderWidth","Search","onChangeText","TextInput","placeholder","body","container","marginTop","pagination","Pagination","iconsSize","isFirstPage","isLastPage","disabled","AntDesign","name","quote","Quote","shape","quotes","QuotesList","navigation","useContext","openDetails","navigate","FlatList","onRefresh","refreshing","renderItem","keyExtractor","ListEmptyComponent","SECONDARY_DETAILS_LIST","PRIMARY_DETAILS_LIST","getDetailsList","primaryData","secondaryData","primaryDetailsList","secondaryDetailsList","concat","block","flexWrap","header","Row","oneOfType","paddingTop","Details","detailsList","key","goBack","createStackNavigator","Navigator","Screen","Navigation","NavigationContainer","initialRouteName","component","options","statusBar","Constants","statusBarHeight","AppStatusBar","translucent","statusBarStyles","StatusBar","Main","barStyle","ErrorBoundary","hasError","this","props","Component","App","useFonts","AppLoading","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","console"],"mappings":"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","file":"static/js/app.dbfe4df1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"./fonts/Roboto-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Roboto-Bold.ttf\";","module.exports = __webpack_public_path__ + \"static/media/no-items.271b27cb.png\";","import robotoRegularFont from '../../../assets/fonts/Roboto-Regular.ttf';\nimport robotoBoldFont from '../../../assets/fonts/Roboto-Bold.ttf';\nimport noItems from '../../../assets/images/no-items.png';\n\nexport const FONTS = {\n  'roboto-regular': robotoRegularFont,\n  'roboto-bold': robotoBoldFont,\n};\n\nexport const IMGS = {\n  noItems,\n};\n","export const encodeSeparatedFields = fields => {\n  const separatedFields = fields.join();\n\n  return encodeURIComponent(separatedFields);\n};\n\nexport const encodeSymbol = symbol => encodeURIComponent(symbol);\n\nexport const sortBySymbol = data => data.sort((a, b) => a.symbol.localeCompare(b.symbol));\n\nexport const getDataListWithValues = (list = [], data) => {\n  if (!data) return list;\n\n  const { symbol, description, digits, ask, bid, change, change24h } = data;\n\n  return list.map(item => {\n    switch (item.title) {\n      case 'Symbol':\n        return { ...item, value: symbol };\n      case 'Description':\n        return { ...item, value: description };\n      case 'Digits':\n        return { ...item, value: digits };\n      case 'Ask':\n        return { ...item, value: ask };\n      case 'Bid':\n        return { ...item, value: bid };\n      case 'Change':\n        return { ...item, value: change };\n      case 'Change 24h':\n        return { ...item, value: change24h };\n      default:\n        return item;\n    }\n  });\n};\n\nexport const getDataForCurrentPage = (currentPage, dataList, listsPerPage) => {\n  const indexOfLastItem = currentPage * listsPerPage;\n  const indexOfFirstItem = indexOfLastItem - listsPerPage;\n\n  const totalPages = Math.ceil(dataList.length / listsPerPage);\n  const currentDataList = dataList.slice(indexOfFirstItem, indexOfLastItem);\n\n  return [totalPages, currentDataList];\n};\n\nexport const findQuotes = (search, quotesList) =>\n  quotesList.filter(({ symbol }) => {\n    const itemData = symbol.toUpperCase();\n    const textData = search.toUpperCase();\n\n    return itemData.match(textData);\n  });\n","import { Dimensions } from 'react-native';\nimport { PADDING_HORIZONTAL } from '../../constants/themes';\n\nconst { width, height } = Dimensions.get('window');\n\nconst quoteHeight = 72;\nconst navigationalElementsHeight = 280;\n\nexport const deviceWidth = width - PADDING_HORIZONTAL * 2;\nexport const deviceHeight = Math.round(height);\n\nexport const quotesPerPage = Math.floor((deviceHeight - navigationalElementsHeight) / quoteHeight);\n","import { FETCH_INIT, FETCH_FAILURE, FETCH_SUCCESS } from '../../constants/actionTypes';\n\nexport const initState = {\n  isLoading: false,\n  isError: false,\n  data: [],\n};\n\nconst dataFetchReducer = (state = initState, { type, data }) => {\n  switch (type) {\n    case FETCH_INIT:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false,\n      };\n    case FETCH_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data,\n      };\n    case FETCH_FAILURE:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataFetchReducer;\n","export const FETCH_INIT = 'FETCH_INIT';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_FAILURE = 'FETCH_FAILURE';\n","export const BASE_PATH = 'https://quotes.instaforex.com/api';\nexport const QUOTES_LIST = '/quotesList';\nexport const QUOTES_TICK = '/quotesTick';\nexport const FIELDS_PARAM = 'f=';\nexport const INSTRUMENTS_PARAM = 'q=';\n","import { FETCH_SUCCESS, FETCH_FAILURE, FETCH_INIT } from '../constants/actionTypes';\n\nexport const fetchInit = () => ({ type: FETCH_INIT });\nexport const fetchSuccess = data => ({ type: FETCH_SUCCESS, data });\nexport const fetchFailure = () => ({ type: FETCH_FAILURE });\n","import { useEffect, useReducer, useCallback } from 'react';\nimport { BASE_PATH, QUOTES_LIST, FIELDS_PARAM } from '../../constants/paths';\nimport { encodeSeparatedFields, sortBySymbol } from '../../utils';\nimport dataFetchReducer, { initState } from '../../reducers/dataFetchReducer';\nimport { fetchInit, fetchFailure, fetchSuccess } from '../../actions';\n\nconst useFetchQuotesList = () => {\n  const [state, dispatch] = useReducer(dataFetchReducer, initState);\n\n  const fetchData = useCallback(async () => {\n    dispatch(fetchInit());\n\n    try {\n      const separatedFields = ['symbol', 'description', 'digits'];\n      const encodedSeparatedFields = encodeSeparatedFields(separatedFields);\n\n      const response = await fetch(\n        `${BASE_PATH}${QUOTES_LIST}?${FIELDS_PARAM}${encodedSeparatedFields}`,\n      );\n      const result = await response.json();\n\n      const { quotesList = [] } = result;\n      const sortedQuotesList = sortBySymbol(quotesList);\n\n      dispatch(fetchSuccess(sortedQuotesList));\n    } catch {\n      dispatch(fetchFailure());\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return [state, fetchData];\n};\n\nexport default useFetchQuotesList;\n","import { useState } from 'react';\n\nconst useSearch = initialSearch => {\n  const [search, setSearch] = useState(initialSearch);\n\n  const updateSearch = value => {\n    setSearch(value);\n  };\n\n  return [search, updateSearch];\n};\n\nexport default useSearch;\n","import { useState } from 'react';\nimport { NEXT, PREV, GO_TO_FIRST_PAGE, FIRST_PAGE } from '../../constants/pagination';\n\nconst usePagination = initialPage => {\n  const [currentPage, setCurrentPage] = useState(initialPage);\n\n  const paginate = operator => {\n    switch (operator) {\n      case NEXT:\n        setCurrentPage(currentPage + 1);\n        break;\n      case PREV:\n        setCurrentPage(currentPage - 1);\n        break;\n      case GO_TO_FIRST_PAGE:\n        setCurrentPage(FIRST_PAGE);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return [currentPage, paginate];\n};\n\nexport default usePagination;\n","export const NEXT = 'next';\nexport const PREV = 'prev';\n\nexport const GO_TO_FIRST_PAGE = 'goToFirstPage';\nexport const FIRST_PAGE = 1;\n","import React, { createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FIRST_PAGE } from '../../constants/pagination';\nimport { findQuotes, getDataForCurrentPage } from '../../utils';\nimport { quotesPerPage } from '../../services/getDeviceSize';\nimport { initState } from '../../reducers/dataFetchReducer';\nimport useFetchQuotesList from '../../hooks/useFetchQuotesList';\nimport useSearch from '../../hooks/useSearch';\nimport usePagination from '../../hooks/usePagination';\n\nconst initContextValue = {\n  ...initState,\n  currentPage: FIRST_PAGE,\n  totalPages: 1,\n  search: '',\n  updateSearch: () => {},\n  fetchData: () => {},\n  paginate: () => {},\n};\n\nconst QuotesListContext = createContext(initContextValue);\n\nconst QuotesListProvider = ({ children }) => {\n  const { currentPage: initPage, search: initSearch } = initContextValue;\n  const [{ data: quotesList, isLoading, isError }, fetchData] = useFetchQuotesList();\n\n  const [search, updateSearch] = useSearch(initSearch);\n  const foundQuotes = findQuotes(search, quotesList);\n  const currentQuotesList = search ? foundQuotes : quotesList;\n\n  const [currentPage, paginate] = usePagination(initPage);\n  const [totalPages, data] = getDataForCurrentPage(currentPage, currentQuotesList, quotesPerPage);\n\n  const value = {\n    data,\n    isLoading,\n    isError,\n    currentPage,\n    totalPages,\n    search,\n    updateSearch,\n    fetchData,\n    paginate,\n  };\n\n  return <QuotesListContext.Provider value={value}>{children}</QuotesListContext.Provider>;\n};\n\nQuotesListProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { QuotesListContext, QuotesListProvider };\n","import { useReducer, useCallback } from 'react';\nimport { BASE_PATH, FIELDS_PARAM, QUOTES_TICK, INSTRUMENTS_PARAM } from '../../constants/paths';\nimport { encodeSeparatedFields, encodeSymbol } from '../../utils';\nimport dataFetchReducer, { initState } from '../../reducers/dataFetchReducer';\nimport { fetchInit, fetchFailure, fetchSuccess } from '../../actions';\n\nconst useFetchQuote = () => {\n  const [state, dispatch] = useReducer(dataFetchReducer, initState);\n\n  const fetchData = useCallback(async quoteId => {\n    dispatch(fetchInit());\n\n    try {\n      const query = encodeSymbol(quoteId);\n      const separatedFields = ['ask', 'bid', 'change', 'change24h'];\n      const encodedSeparatedFields = encodeSeparatedFields(separatedFields);\n\n      const response = await fetch(\n        `${BASE_PATH}${QUOTES_TICK}?${FIELDS_PARAM}${encodedSeparatedFields}&${INSTRUMENTS_PARAM}${query}`,\n      );\n      const result = await response.json();\n\n      dispatch(fetchSuccess(result));\n    } catch {\n      dispatch(fetchFailure());\n    }\n  }, []);\n\n  return [state, fetchData];\n};\n\nexport default useFetchQuote;\n","import React, { createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { initState } from '../../reducers/dataFetchReducer';\nimport useFetchQuote from '../../hooks/useFetchQuote';\n\nconst initContextValue = {\n  ...initState,\n  fetchData: () => {},\n};\n\nconst QuoteContext = createContext(initContextValue);\n\nconst QuoteProvider = ({ children }) => {\n  const [{ data = [], isLoading, isError }, fetchData] = useFetchQuote();\n\n  const value = {\n    data,\n    isError,\n    isLoading,\n    fetchData,\n  };\n\n  return <QuoteContext.Provider value={value}>{children}</QuoteContext.Provider>;\n};\n\nQuoteProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport { QuoteContext, QuoteProvider };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { QuotesListProvider } from '../quotesListContext';\nimport { QuoteProvider } from '../quoteContext';\n\nconst MainProvider = ({ children }) => (\n  <QuotesListProvider>\n    <QuoteProvider>{children}</QuoteProvider>\n  </QuotesListProvider>\n);\n\nMainProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default MainProvider;\n","import { Platform } from 'react-native';\n\nconst { OS } = Platform;\n\nexport const isAndroid = OS === 'android';\nexport const isIOS = OS === 'ios';\n","export const HOME_SCREEN = 'QuotesList';\nexport const DETAILS_SCREEN = 'Details';\n\nexport const HOME_OPTIONS = { title: 'InstaForex' };\nexport const DETAILS_OPTIONS = ({\n  route: {\n    params: { symbol },\n  },\n}) => ({ title: symbol });\n","import React from 'react';\nimport { Text } from 'react-native';\nimport PropTypes from 'prop-types';\n\nconst AppText = ({ style, children, bold, ...attrs }) => {\n  const textStyles = { fontFamily: bold ? 'roboto-bold' : 'roboto-regular' };\n\n  return (\n    <Text style={[textStyles, style]} {...attrs}>\n      {children}\n    </Text>\n  );\n};\n\nAppText.propTypes = {\n  children: PropTypes.node.isRequired,\n  bold: PropTypes.bool,\n  style: Text.propTypes.style,\n};\n\nAppText.defaultProps = {\n  bold: false,\n  style: {},\n};\n\nexport default AppText;\n","import { StyleSheet } from 'react-native';\nimport { DANGER_COLOR } from '../../constants/themes';\n\nconst styles = StyleSheet.create({\n  error: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n  text: {\n    color: DANGER_COLOR,\n    fontSize: 20,\n    marginBottom: 20,\n  },\n});\n\nexport default styles;\n","export const PRIMARY_COLOR = '#434343';\nexport const SECONDARY_COLOR = '#757575';\nexport const DANGER_COLOR = '#e53935';\nexport const LIGHT_COLOR = '#fff';\nexport const MUTED_COLOR = '#808080';\nexport const PADDING_HORIZONTAL = 10;\n","import React from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport AppText from '../AppText';\nimport styles from './styles';\n\nconst ErrorIndicator = ({ children }) => (\n  <View style={styles.error}>\n    <AppText style={styles.text}>Something went wrong!</AppText>\n    {children}\n  </View>\n);\n\nErrorIndicator.propTypes = {\n  children: PropTypes.node,\n};\n\nErrorIndicator.defaultProps = {\n  children: null,\n};\n\nexport default ErrorIndicator;\n","import { StyleSheet } from 'react-native';\nimport { LIGHT_COLOR } from '../../constants/themes';\n\nconst styles = StyleSheet.create({\n  button: {\n    alignItems: 'center',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n    paddingVertical: 10,\n  },\n  text: {\n    color: LIGHT_COLOR,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, TouchableOpacity, TouchableNativeFeedback } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { PRIMARY_COLOR } from '../../constants/themes';\nimport { isAndroid } from '../../services/detectDeviceOS';\nimport AppText from '../AppText';\nimport styles from './styles';\n\nconst AppButton = ({ children, onPress, backgroundColor, activeOpacity, ...attrs }) => {\n  const Wrapper = isAndroid ? TouchableNativeFeedback : TouchableOpacity;\n  const buttonStyles = { backgroundColor };\n\n  return (\n    <Wrapper onPress={onPress} activeOpacity={activeOpacity} {...attrs}>\n      <View style={[styles.button, buttonStyles]}>\n        <AppText bold style={styles.text}>\n          {children}\n        </AppText>\n      </View>\n    </Wrapper>\n  );\n};\n\nAppButton.propTypes = {\n  children: PropTypes.node.isRequired,\n  onPress: PropTypes.func,\n  backgroundColor: PropTypes.string,\n  activeOpacity: PropTypes.number,\n};\n\nAppButton.defaultProps = {\n  onPress: () => {},\n  backgroundColor: PRIMARY_COLOR,\n  activeOpacity: 0.7,\n};\n\nexport default AppButton;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  loader: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { PRIMARY_COLOR } from '../../constants/themes';\nimport styles from './styles';\n\nconst AppLoader = ({ size, color, ...attrs }) => (\n  <View style={styles.loader}>\n    <ActivityIndicator size={size} color={color} {...attrs} />\n  </View>\n);\n\nAppLoader.propTypes = {\n  size: PropTypes.string,\n  color: PropTypes.string,\n};\n\nAppLoader.defaultProps = {\n  size: 'large',\n  color: PRIMARY_COLOR,\n};\n\nexport default AppLoader;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  image: {\n    height: '100%',\n    resizeMode: 'contain',\n    width: '100%',\n  },\n  wrapper: {\n    alignItems: 'center',\n    height: 300,\n    justifyContent: 'center',\n    padding: 10,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, Image } from 'react-native';\nimport { IMGS } from '../../constants/files';\nimport styles from './styles';\n\nconst EmptyPage = () => (\n  <View style={styles.wrapper}>\n    <Image style={styles.image} source={IMGS.noItems} />\n  </View>\n);\n\nexport default EmptyPage;\n","import { StyleSheet } from 'react-native';\nimport { LIGHT_COLOR, MUTED_COLOR } from '../../constants/themes';\nimport { deviceWidth } from '../../services/getDeviceSize';\n\nconst styles = StyleSheet.create({\n  input: {\n    alignItems: 'center',\n    backgroundColor: LIGHT_COLOR,\n    borderColor: MUTED_COLOR,\n    borderRadius: 5,\n    borderWidth: 1,\n    flexDirection: 'row',\n    fontSize: 26,\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    padding: 10,\n    width: deviceWidth,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { TextInput } from 'react-native';\nimport PropTypes from 'prop-types';\nimport styles from './styles';\n\nconst Search = ({ onChangeText, value }) => {\n  const onChangeTextHandler = text => onChangeText(text);\n\n  return (\n    <TextInput\n      style={styles.input}\n      onChangeText={onChangeTextHandler}\n      placeholder=\"Search...\"\n      value={value}\n    />\n  );\n};\n\nSearch.propTypes = {\n  value: PropTypes.string,\n  onChangeText: PropTypes.func,\n};\n\nSearch.defaultProps = {\n  value: '',\n  onChangeText: () => {},\n};\n\nexport default Search;\n","import { StyleSheet } from 'react-native';\nimport { deviceWidth } from '../../services/getDeviceSize';\n\nconst styles = StyleSheet.create({\n  body: {\n    width: deviceWidth - 150,\n  },\n  container: {\n    marginTop: 20,\n    width: deviceWidth - 30,\n  },\n  pagination: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 25,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, TouchableNativeFeedback, TouchableOpacity } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { AntDesign } from '@expo/vector-icons';\nimport { NEXT, PREV, FIRST_PAGE } from '../../constants/pagination';\nimport { isAndroid } from '../../services/detectDeviceOS';\nimport AppText from '../AppText';\nimport styles from './styles';\n\nconst Pagination = ({ totalPages, currentPage, onPress, iconsSize, activeOpacity }) => {\n  if (totalPages <= 1) return null;\n\n  const Wrapper = isAndroid ? TouchableNativeFeedback : TouchableOpacity;\n\n  const isFirstPage = currentPage === FIRST_PAGE;\n  const isLastPage = currentPage === totalPages;\n\n  const prevPage = () => !isFirstPage && onPress(PREV);\n  const nextPage = () => !isLastPage && onPress(NEXT);\n\n  return (\n    <View style={[styles.pagination, styles.container]}>\n      <Wrapper onPress={prevPage} activeOpacity={activeOpacity} disabled={isFirstPage}>\n        <AntDesign name=\"caretleft\" size={iconsSize} />\n      </Wrapper>\n\n      <View style={[styles.pagination, styles.body]}>\n        <AppText style={styles.text}>\n          {currentPage} of {totalPages}\n        </AppText>\n      </View>\n\n      <Wrapper onPress={nextPage} activeOpacity={activeOpacity} disabled={isLastPage}>\n        <AntDesign name=\"caretright\" size={iconsSize} />\n      </Wrapper>\n    </View>\n  );\n};\n\nPagination.propTypes = {\n  currentPage: PropTypes.number,\n  totalPages: PropTypes.number,\n  onPress: PropTypes.func,\n  iconsSize: PropTypes.number,\n  activeOpacity: PropTypes.number,\n};\n\nPagination.defaultProps = {\n  currentPage: 1,\n  totalPages: 1,\n  onPress: () => {},\n  iconsSize: 40,\n  activeOpacity: 0.7,\n};\n\nexport default Pagination;\n","import { StyleSheet } from 'react-native';\nimport { PRIMARY_COLOR } from '../../constants/themes';\n\nconst styles = StyleSheet.create({\n  quote: {\n    alignItems: 'center',\n    borderColor: PRIMARY_COLOR,\n    borderRadius: 5,\n    borderWidth: 1,\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'center',\n    marginBottom: 10,\n    padding: 15,\n  },\n  text: {\n    fontSize: 26,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { TouchableOpacity, View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport AppText from '../AppText';\nimport styles from './styles';\n\nconst Quote = ({ item, onPress }) => {\n  const onPressHandler = () => onPress(item);\n\n  return (\n    <TouchableOpacity onPress={onPressHandler}>\n      <View style={styles.quote}>\n        <AppText bold style={styles.text}>\n          {item.symbol}\n        </AppText>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nQuote.propTypes = {\n  item: PropTypes.shape({\n    symbol: PropTypes.string,\n    description: PropTypes.string,\n    digits: PropTypes.number,\n  }),\n  onPress: PropTypes.func,\n};\n\nQuote.defaultProps = {\n  item: {\n    symbol: '',\n    description: 'Here should be a description',\n    digits: 0,\n  },\n  onPress: () => {},\n};\n\nexport default Quote;\n","import { StyleSheet } from 'react-native';\nimport { LIGHT_COLOR, MUTED_COLOR } from '../../constants/themes';\nimport { deviceHeight, deviceWidth } from '../../services/getDeviceSize';\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    marginTop: 10,\n  },\n  quotes: {\n    backgroundColor: LIGHT_COLOR,\n    borderColor: MUTED_COLOR,\n    borderRadius: 5,\n    borderWidth: 1,\n    height: deviceHeight - 270,\n    padding: 10,\n    width: deviceWidth,\n  },\n});\n\nexport default styles;\n","import React, { useContext } from 'react';\nimport { FlatList, View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { DETAILS_SCREEN } from '../../constants/routes';\nimport { DANGER_COLOR } from '../../constants/themes';\nimport { GO_TO_FIRST_PAGE, FIRST_PAGE } from '../../constants/pagination';\nimport { QuotesListContext } from '../../contextes/quotesListContext';\nimport ErrorIndicator from '../../components/ErrorIndicator';\nimport AppButton from '../../components/AppButton';\nimport AppLoader from '../../components/AppLoader';\nimport EmptyPage from '../../components/EmptyPage';\nimport Search from '../../components/Search';\nimport Pagination from '../../components/Pagination';\nimport Quote from '../../components/Quote';\nimport styles from './styles';\n\nconst QuotesList = ({ navigation }) => {\n  const {\n    data,\n    isError,\n    isLoading,\n    currentPage,\n    totalPages,\n    search,\n    updateSearch,\n    fetchData,\n    paginate,\n  } = useContext(QuotesListContext);\n\n  const openDetails = params => navigation.navigate(DETAILS_SCREEN, params);\n  const handleSearch = text => {\n    updateSearch(text);\n    currentPage !== FIRST_PAGE && paginate(GO_TO_FIRST_PAGE);\n  };\n\n  // eslint-disable-next-line react/prop-types\n  const renderItem = ({ item }) => <Quote item={item} onPress={openDetails} />;\n  const keyExtractor = ({ symbol }) => symbol;\n  const renderEmpty = () => <EmptyPage />;\n\n  if (isError) {\n    return (\n      <ErrorIndicator>\n        <AppButton backgroundColor={DANGER_COLOR} onPress={fetchData}>\n          Try again\n        </AppButton>\n      </ErrorIndicator>\n    );\n  }\n\n  if (isLoading) return <AppLoader />;\n\n  return (\n    <View style={styles.container}>\n      <Search onChangeText={handleSearch} value={search} />\n\n      <View style={styles.quotes}>\n        <FlatList\n          data={data}\n          onRefresh={fetchData}\n          refreshing={isLoading}\n          renderItem={renderItem}\n          keyExtractor={keyExtractor}\n          ListEmptyComponent={renderEmpty}\n        />\n      </View>\n\n      <Pagination totalPages={totalPages} currentPage={currentPage} onPress={paginate} />\n    </View>\n  );\n};\n\nQuotesList.propTypes = {\n  navigation: PropTypes.shape({\n    navigate: PropTypes.func,\n  }),\n};\n\nQuotesList.defaultProps = {\n  navigation: {\n    navigate: () => {},\n  },\n};\n\nexport default QuotesList;\n","export const SECONDARY_DETAILS_LIST = [\n  { title: 'Ask' },\n  { title: 'Bid' },\n  { title: 'Change' },\n  { title: 'Change 24h' },\n];\n\nexport const PRIMARY_DETAILS_LIST = [\n  { title: 'Symbol' },\n  { title: 'Description' },\n  { title: 'Digits' },\n];\n","import { SECONDARY_DETAILS_LIST, PRIMARY_DETAILS_LIST } from '../../constants/lists';\nimport { getDataListWithValues } from '../../utils';\n\nconst getDetailsList = (primaryData, secondaryData) => {\n  const primaryDetailsList = getDataListWithValues(PRIMARY_DETAILS_LIST, primaryData);\n  const secondaryDetailsList = getDataListWithValues(SECONDARY_DETAILS_LIST, secondaryData);\n\n  return primaryDetailsList.concat(secondaryDetailsList);\n};\n\nexport default getDetailsList;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  block: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    marginBottom: 10,\n    width: '95%',\n  },\n  header: {\n    fontFamily: 'roboto-bold',\n  },\n  text: {\n    fontSize: 26,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View, Text } from 'react-native';\nimport PropTypes from 'prop-types';\nimport AppText from '../AppText';\nimport styles from './styles';\n\nconst Row = ({ title, value }) => (\n  <View style={styles.block}>\n    <AppText style={styles.text}>\n      <Text style={styles.header}>{title}:</Text> {value}\n    </AppText>\n  </View>\n);\n\nRow.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\n\nRow.defaultProps = {\n  value: 'Unknown',\n};\n\nexport default Row;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  button: {\n    marginTop: 50,\n    width: 100,\n  },\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    paddingTop: 20,\n  },\n});\n\nexport default styles;\n","import React, { useContext, useEffect } from 'react';\nimport { View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { AntDesign } from '@expo/vector-icons';\nimport { DANGER_COLOR, SECONDARY_COLOR } from '../../constants/themes';\nimport getDetailsList from '../../services/getDetailsList';\nimport { QuoteContext } from '../../contextes/quoteContext';\nimport ErrorIndicator from '../../components/ErrorIndicator';\nimport AppLoader from '../../components/AppLoader';\nimport AppButton from '../../components/AppButton';\nimport Row from '../../components/Row';\nimport styles from './styles';\n\nconst Details = ({ route, navigation }) => {\n  const { data, isError, isLoading, fetchData } = useContext(QuoteContext);\n  const { symbol } = route.params;\n\n  useEffect(() => {\n    fetchData(symbol);\n  }, [fetchData, symbol]);\n\n  const detailsList = getDetailsList(route.params, data[0]);\n\n  const goBack = () => navigation.goBack();\n  const tryAgain = () => fetchData(symbol);\n\n  if (isError) {\n    return (\n      <ErrorIndicator>\n        <AppButton backgroundColor={DANGER_COLOR} onPress={tryAgain}>\n          Try again\n        </AppButton>\n      </ErrorIndicator>\n    );\n  }\n\n  if (isLoading) return <AppLoader />;\n\n  return (\n    <View style={styles.container}>\n      {detailsList.map(({ title, value }) => (\n        <Row key={title} title={title} value={value} />\n      ))}\n\n      <View style={styles.button}>\n        <AppButton backgroundColor={SECONDARY_COLOR} onPress={goBack}>\n          <AntDesign name=\"back\" size={40} />\n        </AppButton>\n      </View>\n    </View>\n  );\n};\n\nDetails.propTypes = {\n  route: PropTypes.shape({\n    params: PropTypes.shape({\n      symbol: PropTypes.string,\n      description: PropTypes.string,\n      digits: PropTypes.number,\n    }),\n  }),\n  navigation: PropTypes.shape({\n    goBack: PropTypes.func,\n  }),\n};\n\nDetails.defaultProps = {\n  route: {\n    params: {\n      symbol: '',\n      description: 'Here should be a description',\n      digits: 0,\n    },\n  },\n  navigation: {\n    goBack: () => {},\n  },\n};\n\nexport default Details;\n","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { DETAILS_SCREEN, HOME_SCREEN, HOME_OPTIONS, DETAILS_OPTIONS } from '../constants/routes';\nimport QuotesList from '../screens/QuotesList';\nimport Details from '../screens/Details';\n\nconst { Navigator, Screen } = createStackNavigator();\n\nconst Navigation = () => (\n  <NavigationContainer>\n    <Navigator initialRouteName={HOME_SCREEN}>\n      <Screen name={HOME_SCREEN} component={QuotesList} options={HOME_OPTIONS} />\n\n      <Screen name={DETAILS_SCREEN} component={Details} options={DETAILS_OPTIONS} />\n    </Navigator>\n  </NavigationContainer>\n);\n\nexport default Navigation;\n","import { StyleSheet } from 'react-native';\nimport Constants from 'expo-constants';\n\nconst styles = StyleSheet.create({\n  statusBar: {\n    height: Constants.statusBarHeight,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { StatusBar, View } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { PRIMARY_COLOR } from '../../constants/themes';\nimport styles from './styles';\n\nconst AppStatusBar = ({ backgroundColor, translucent, ...attrs }) => {\n  const statusBarStyles = { backgroundColor };\n\n  return (\n    <View style={[styles.statusBar, statusBarStyles]}>\n      <StatusBar translucent={translucent} backgroundColor={backgroundColor} {...attrs} />\n    </View>\n  );\n};\n\nAppStatusBar.propTypes = {\n  backgroundColor: PropTypes.string,\n  translucent: PropTypes.bool,\n};\n\nAppStatusBar.defaultProps = {\n  backgroundColor: PRIMARY_COLOR,\n  translucent: true,\n};\n\nexport default AppStatusBar;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default styles;\n","import React from 'react';\nimport { View } from 'react-native';\nimport { PRIMARY_COLOR, LIGHT_COLOR } from '../../constants/themes';\nimport { isIOS } from '../../services/detectDeviceOS';\nimport Navigation from '../../navigation';\nimport AppStatusBar from '../../components/AppStatusBar';\nimport styles from './styles';\n\nconst Main = () => (\n  <View style={styles.container}>\n    <AppStatusBar\n      backgroundColor={isIOS ? LIGHT_COLOR : PRIMARY_COLOR}\n      barStyle={isIOS ? 'dark-content' : 'light-content'}\n    />\n\n    <View style={styles.container}>\n      <Navigation />\n    </View>\n  </View>\n);\n\nexport default Main;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorIndicator from '../ErrorIndicator';\n\nclass ErrorBoundary extends Component {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n  };\n\n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? <ErrorIndicator /> : children;\n  }\n}\n\nexport default ErrorBoundary;\n","import 'react-native-gesture-handler';\nimport React from 'react';\nimport { useFonts } from '@use-expo/font';\nimport { AppLoading } from 'expo';\nimport { FONTS } from './src/constants/files';\nimport MainProvider from './src/contextes/mainContext';\nimport Main from './src/layouts/Main';\nimport ErrorBoundary from './src/components/ErrorBoundary';\n\nconst App = () => {\n  const [fontsLoaded] = useFonts(FONTS);\n\n  if (!fontsLoaded) return <AppLoading />;\n\n  return (\n    <ErrorBoundary>\n      <MainProvider>\n        <Main />\n      </MainProvider>\n    </ErrorBoundary>\n  );\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/InstaForexAPI/expo-service-worker.js', { scope: '/InstaForexAPI/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}